Token: Separator          Lexeme: %%
	 <Rat21SU> ::= %% <Opt Declaration List> <Statement List> %%
Token: Keyword          Lexeme: integer
	 <Opt Declaration List> ::= <Declaration List>  |  <Empty>
	 <Declaration List> ::= <Declaration> ; <Declaration List P>
	 <Declaration> ::= <Qualifier> <identifier> 
	 <Qualifier> ::= integer
Token: Identifier          Lexeme: n
Token: Separator          Lexeme: ;
Token: Keyword          Lexeme: integer
	 <Declaration List P> ::= <Declaration List>  |  <Empty>
	 <Declaration List> ::= <Declaration> ; <Declaration List P>
	 <Declaration> ::= <Qualifier> <identifier> 
	 <Qualifier> ::= integer
Token: Identifier          Lexeme: t1
Token: Separator          Lexeme: ;
Token: Keyword          Lexeme: integer
	 <Declaration List P> ::= <Declaration List>  |  <Empty>
	 <Declaration List> ::= <Declaration> ; <Declaration List P>
	 <Declaration> ::= <Qualifier> <identifier> 
	 <Qualifier> ::= integer
Token: Identifier          Lexeme: t2
Token: Separator          Lexeme: ;
Token: Keyword          Lexeme: integer
	 <Declaration List P> ::= <Declaration List>  |  <Empty>
	 <Declaration List> ::= <Declaration> ; <Declaration List P>
	 <Declaration> ::= <Qualifier> <identifier> 
	 <Qualifier> ::= integer
Token: Identifier          Lexeme: nextT
Token: Separator          Lexeme: ;
Token: Keyword          Lexeme: integer
	 <Declaration List P> ::= <Declaration List>  |  <Empty>
	 <Declaration List> ::= <Declaration> ; <Declaration List P>
	 <Declaration> ::= <Qualifier> <identifier> 
	 <Qualifier> ::= integer
Token: Identifier          Lexeme: i
Token: Separator          Lexeme: ;
Token: Identifier          Lexeme: n
	 <Declaration List P> ::= <Declaration List>  |  <Empty>
	 <Declaration List P> ::= <Empty>
	 <Statement List> ::= <Statement> <Statement List P>
	 <Statement> ::= <Assign>
	 <Assign> ::= <Identifier> = <Expression> ;
Token: Operator          Lexeme: =
Token: Integer          Lexeme: 10
	 <Expression> ::= <Term> <Expression P>
	 <Term> ::= <Factor> <Term P>
	 <Factor> ::= <Primary>
	 <Primary> ::= <Integer>
Token: Operator          Lexeme: +
	 <Term P> ::= <Empty>
	 <Expression P> ::= + <Term> <Expression P>
Token: Integer          Lexeme: 1
	 <Term> ::= <Factor> <Term P>
	 <Factor> ::= <Primary>
	 <Primary> ::= <Integer>
Token: Separator          Lexeme: ;
	 <Term P> ::= <Empty>
	 <Expression P> ::= <Empty>
Token: Identifier          Lexeme: t1
	 <Statement List P> ::= <Statement List>
	 <Statement List> ::= <Statement> <Statement List P>
	 <Statement> ::= <Assign>
	 <Assign> ::= <Identifier> = <Expression> ;
Token: Operator          Lexeme: =
Token: Integer          Lexeme: 0
	 <Expression> ::= <Term> <Expression P>
	 <Term> ::= <Factor> <Term P>
	 <Factor> ::= <Primary>
	 <Primary> ::= <Integer>
Token: Separator          Lexeme: ;
	 <Term P> ::= <Empty>
	 <Expression P> ::= <Empty>
Token: Identifier          Lexeme: t2
	 <Statement List P> ::= <Statement List>
	 <Statement List> ::= <Statement> <Statement List P>
	 <Statement> ::= <Assign>
	 <Assign> ::= <Identifier> = <Expression> ;
Token: Operator          Lexeme: =
Token: Integer          Lexeme: 1
	 <Expression> ::= <Term> <Expression P>
	 <Term> ::= <Factor> <Term P>
	 <Factor> ::= <Primary>
	 <Primary> ::= <Integer>
Token: Separator          Lexeme: ;
	 <Term P> ::= <Empty>
	 <Expression P> ::= <Empty>
Token: Identifier          Lexeme: nextT
	 <Statement List P> ::= <Statement List>
	 <Statement List> ::= <Statement> <Statement List P>
	 <Statement> ::= <Assign>
	 <Assign> ::= <Identifier> = <Expression> ;
Token: Operator          Lexeme: =
Token: Integer          Lexeme: 0
	 <Expression> ::= <Term> <Expression P>
	 <Term> ::= <Factor> <Term P>
	 <Factor> ::= <Primary>
	 <Primary> ::= <Integer>
Token: Separator          Lexeme: ;
	 <Term P> ::= <Empty>
	 <Expression P> ::= <Empty>
Token: Identifier          Lexeme: i
	 <Statement List P> ::= <Statement List>
	 <Statement List> ::= <Statement> <Statement List P>
	 <Statement> ::= <Assign>
	 <Assign> ::= <Identifier> = <Expression> ;
Token: Operator          Lexeme: =
Token: Integer          Lexeme: 0
	 <Expression> ::= <Term> <Expression P>
	 <Term> ::= <Factor> <Term P>
	 <Factor> ::= <Primary>
	 <Primary> ::= <Integer>
Token: Separator          Lexeme: ;
	 <Term P> ::= <Empty>
	 <Expression P> ::= <Empty>
Token: Keyword          Lexeme: while
	 <Statement List P> ::= <Statement List>
	 <Statement List> ::= <Statement> <Statement List P>
	 <Statement> ::= <While>
	 <While> ::= while ( <Condition> ) <Statement>
Token: Separator          Lexeme: (
Token: Identifier          Lexeme: i
	 <Condition> ::= <Expression> <Relop> <Expression>
	 <Expression> ::= <Term> <Expression P>
	 <Term> ::= <Factor> <Term P>
	 <Factor> ::= <Primary>
	 <Primary> ::= <Identifier>
Token: Operator          Lexeme: <
	 <Term P> ::= <Empty>
	 <Expression P> ::= <Empty>
	 <Relop> ::=  <
Token: Identifier          Lexeme: n
	 <Expression> ::= <Term> <Expression P>
	 <Term> ::= <Factor> <Term P>
	 <Factor> ::= <Primary>
	 <Primary> ::= <Identifier>
Token: Separator          Lexeme: )
	 <Term P> ::= <Empty>
	 <Expression P> ::= <Empty>
Token: Keyword          Lexeme: begin
	 <Statement> ::= <Compound>
	 <Compound> ::= begin <Statement List> end
Token: Keyword          Lexeme: if
	 <Statement List> ::= <Statement> <Statement List P>
	 <Statement> ::= <If>
	 <If> ::= if ( <Condition> ) <Statement> <If P>
Token: Separator          Lexeme: (
Token: Identifier          Lexeme: i
	 <Condition> ::= <Expression> <Relop> <Expression>
	 <Expression> ::= <Term> <Expression P>
	 <Term> ::= <Factor> <Term P>
	 <Factor> ::= <Primary>
	 <Primary> ::= <Identifier>
Token: Operator          Lexeme: ==
	 <Term P> ::= <Empty>
	 <Expression P> ::= <Empty>
	 <Relop> ::=  ==
Token: Integer          Lexeme: 1
	 <Expression> ::= <Term> <Expression P>
	 <Term> ::= <Factor> <Term P>
	 <Factor> ::= <Primary>
	 <Primary> ::= <Integer>
Token: Separator          Lexeme: )
	 <Term P> ::= <Empty>
	 <Expression P> ::= <Empty>
Token: Keyword          Lexeme: put
	 <Statement> ::= <Put>
	 <Put> ::= put ( <identifier> );
Token: Separator          Lexeme: (
Token: Identifier          Lexeme: t1
Token: Separator          Lexeme: )
Token: Separator          Lexeme: ;
Token: Keyword          Lexeme: endif
	 <If P> ::= endif
Token: Keyword          Lexeme: if
	 <Statement List P> ::= <Statement List>
	 <Statement List> ::= <Statement> <Statement List P>
	 <Statement> ::= <If>
	 <If> ::= if ( <Condition> ) <Statement> <If P>
Token: Separator          Lexeme: (
Token: Identifier          Lexeme: i
	 <Condition> ::= <Expression> <Relop> <Expression>
	 <Expression> ::= <Term> <Expression P>
	 <Term> ::= <Factor> <Term P>
	 <Factor> ::= <Primary>
	 <Primary> ::= <Identifier>
Token: Operator          Lexeme: ==
	 <Term P> ::= <Empty>
	 <Expression P> ::= <Empty>
	 <Relop> ::=  ==
Token: Integer          Lexeme: 2
	 <Expression> ::= <Term> <Expression P>
	 <Term> ::= <Factor> <Term P>
	 <Factor> ::= <Primary>
	 <Primary> ::= <Integer>
Token: Separator          Lexeme: )
	 <Term P> ::= <Empty>
	 <Expression P> ::= <Empty>
Token: Keyword          Lexeme: put
	 <Statement> ::= <Put>
	 <Put> ::= put ( <identifier> );
Token: Separator          Lexeme: (
Token: Identifier          Lexeme: t2
Token: Separator          Lexeme: )
Token: Separator          Lexeme: ;
Token: Keyword          Lexeme: endif
	 <If P> ::= endif
Token: Identifier          Lexeme: nextT
	 <Statement List P> ::= <Statement List>
	 <Statement List> ::= <Statement> <Statement List P>
	 <Statement> ::= <Assign>
	 <Assign> ::= <Identifier> = <Expression> ;
Token: Operator          Lexeme: =
Token: Identifier          Lexeme: t1
	 <Expression> ::= <Term> <Expression P>
	 <Term> ::= <Factor> <Term P>
	 <Factor> ::= <Primary>
	 <Primary> ::= <Identifier>
Token: Operator          Lexeme: +
	 <Term P> ::= <Empty>
	 <Expression P> ::= + <Term> <Expression P>
Token: Identifier          Lexeme: t2
	 <Term> ::= <Factor> <Term P>
	 <Factor> ::= <Primary>
	 <Primary> ::= <Identifier>
Token: Separator          Lexeme: ;
	 <Term P> ::= <Empty>
	 <Expression P> ::= <Empty>
Token: Identifier          Lexeme: t1
	 <Statement List P> ::= <Statement List>
	 <Statement List> ::= <Statement> <Statement List P>
	 <Statement> ::= <Assign>
	 <Assign> ::= <Identifier> = <Expression> ;
Token: Operator          Lexeme: =
Token: Identifier          Lexeme: t2
	 <Expression> ::= <Term> <Expression P>
	 <Term> ::= <Factor> <Term P>
	 <Factor> ::= <Primary>
	 <Primary> ::= <Identifier>
Token: Separator          Lexeme: ;
	 <Term P> ::= <Empty>
	 <Expression P> ::= <Empty>
Token: Identifier          Lexeme: t2
	 <Statement List P> ::= <Statement List>
	 <Statement List> ::= <Statement> <Statement List P>
	 <Statement> ::= <Assign>
	 <Assign> ::= <Identifier> = <Expression> ;
Token: Operator          Lexeme: =
Token: Identifier          Lexeme: nextT
	 <Expression> ::= <Term> <Expression P>
	 <Term> ::= <Factor> <Term P>
	 <Factor> ::= <Primary>
	 <Primary> ::= <Identifier>
Token: Separator          Lexeme: ;
	 <Term P> ::= <Empty>
	 <Expression P> ::= <Empty>
Token: Keyword          Lexeme: put
	 <Statement List P> ::= <Statement List>
	 <Statement List> ::= <Statement> <Statement List P>
	 <Statement> ::= <Put>
	 <Put> ::= put ( <identifier> );
Token: Separator          Lexeme: (
Token: Identifier          Lexeme: nextT
Token: Separator          Lexeme: )
Token: Separator          Lexeme: ;
Token: Identifier          Lexeme: i
	 <Statement List P> ::= <Statement List>
	 <Statement List> ::= <Statement> <Statement List P>
	 <Statement> ::= <Assign>
	 <Assign> ::= <Identifier> = <Expression> ;
Token: Operator          Lexeme: =
Token: Identifier          Lexeme: i
	 <Expression> ::= <Term> <Expression P>
	 <Term> ::= <Factor> <Term P>
	 <Factor> ::= <Primary>
	 <Primary> ::= <Identifier>
Token: Operator          Lexeme: +
	 <Term P> ::= <Empty>
	 <Expression P> ::= + <Term> <Expression P>
Token: Integer          Lexeme: 1
	 <Term> ::= <Factor> <Term P>
	 <Factor> ::= <Primary>
	 <Primary> ::= <Integer>
Token: Separator          Lexeme: ;
	 <Term P> ::= <Empty>
	 <Expression P> ::= <Empty>
Token: Keyword          Lexeme: end
	 <Statement List P> ::= <Statement List>
	 <Statement List> ::= <Statement> <Statement List P>
Token: Separator          Lexeme: %%
	 <Statement List P> ::= <Empty>
	 <Statement List P> ::= <Empty>
